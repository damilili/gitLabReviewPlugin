package cn.kuwo.intellij.plugin.ui;

import cn.kuwo.intellij.plugin.CommonUtil;
import cn.kuwo.intellij.plugin.Constants;
import com.intellij.ide.util.PropertiesComponent;
import com.intellij.openapi.options.Configurable;
import com.intellij.openapi.options.ConfigurationException;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vcs.VcsConfigurableProvider;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import git4idea.GitUtil;
import git4idea.repo.GitRemote;
import git4idea.repo.GitRepository;
import git4idea.repo.GitRepositoryManager;
import org.jetbrains.annotations.Nls;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.HashSet;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class SettingUi implements Configurable {
    private Project project;
    private JPanel basePan;
    private JComboBox<String> repositoryList;
    private JButton btToken;
    private JTextField token;
    public static final String SETTINGNAME = "GitReviewMerge";

    public SettingUi(Project project) {
        this.project = project;
        GitRepositoryManager manager = GitUtil.getRepositoryManager(project);
        List<GitRepository> repositories = manager.getRepositories();
        HashSet<String> remoteHosts = new HashSet<>();
        for (GitRepository repository : repositories) {
            for (GitRemote gitRemote : repository.getRemotes()) {
                Pattern compile = Pattern.compile("(?<=(http(s)?://))[\\w|\\.]*");
                Matcher matcher = compile.matcher(gitRemote.getFirstUrl());
                if (matcher.find()) {
                    remoteHosts.add(matcher.group());
                    continue;
                }
                compile = Pattern.compile("(?<=(git@))[\\w|\\.|\\d]*");
                matcher = compile.matcher(gitRemote.getFirstUrl());
                if (matcher.find()) {
                    remoteHosts.add(matcher.group());
                }
            }
        }
        for (String remoteHost : remoteHosts) {
            repositoryList.addItem(remoteHost);
        }
        repositoryList.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                PropertiesComponent propertiesComponent = PropertiesComponent.getInstance(project);
                token.setText(propertiesComponent.getValue((String) repositoryList.getSelectedItem()));
            }
        });
        if (repositoryList.getItemCount() > 0) {
            repositoryList.setSelectedIndex(0);
            PropertiesComponent propertiesComponent = PropertiesComponent.getInstance(project);
            token.setText(propertiesComponent.getValue(Constants.PROPERTIEPRE + ((String) repositoryList.getSelectedItem())));
        }
        btToken.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String currentRepo = (String) repositoryList.getSelectedItem();
                String currentRepoTokenPage = "http://" + currentRepo + "/profile/account";
                CommonUtil.openWebPage(currentRepoTokenPage);
            }
        });
    }

    @Nls
    @Override
    public String getDisplayName() {
        return SETTINGNAME ;
    }

    @Nullable
    @Override
    public JComponent createComponent() {
        return basePan;
    }

    @Override
    public boolean isModified() {
        return true;
    }

    @Override
    public void apply() throws ConfigurationException {
        if (repositoryList.getItemCount() > 0) {
            String currentRepo = (String) repositoryList.getSelectedItem();
            if (currentRepo != null && !currentRepo.isEmpty()) {
                PropertiesComponent propertiesComponent = PropertiesComponent.getInstance(project);
                propertiesComponent.setValue(Constants.PROPERTIEPRE + currentRepo, token.getText());
            }
        }

    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        basePan = new JPanel();
        basePan.setLayout(new FormLayout("left:73dlu:noGrow,fill:775px:noGrow", "center:d:noGrow,top:4dlu:noGrow,center:74px:noGrow"));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new FormLayout("fill:498px:grow,left:4dlu:noGrow,fill:230px:noGrow", "center:d:grow"));
        CellConstraints cc = new CellConstraints();
        basePan.add(panel1, cc.xy(2, 3));
        btToken = new JButton();
        btToken.setIcon(new ImageIcon(getClass().getResource("/general/web.png")));
        btToken.setText("Token Page");
        panel1.add(btToken, cc.xy(3, 1));
        token = new JTextField();
        token.setText("");
        panel1.add(token, cc.xy(1, 1, CellConstraints.FILL, CellConstraints.DEFAULT));
        repositoryList = new JComboBox();
        basePan.add(repositoryList, cc.xy(2, 1));
        final JLabel label1 = new JLabel();
        label1.setText("Remot Repository:");
        basePan.add(label1, cc.xy(1, 1, CellConstraints.CENTER, CellConstraints.DEFAULT));
        final JLabel label2 = new JLabel();
        label2.setText("Private Token:");
        basePan.add(label2, cc.xy(1, 3, CellConstraints.CENTER, CellConstraints.DEFAULT));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return basePan;
    }

    public static class ConfigurableProvider implements VcsConfigurableProvider {
        @Override
        public Configurable getConfigurable(Project project) {
            return new SettingUi(project);
        }
    }
}
